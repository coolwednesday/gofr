// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=opentsdb
//

// Package opentsdb is a generated GoMock package.
package opentsdb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpentsdbProvider is a mock of OpentsdbProvider interface.
type MockOpentsdbProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOpentsdbProviderMockRecorder
}

// MockOpentsdbProviderMockRecorder is the mock recorder for MockOpentsdbProvider.
type MockOpentsdbProviderMockRecorder struct {
	mock *MockOpentsdbProvider
}

// NewMockOpentsdbProvider creates a new mock instance.
func NewMockOpentsdbProvider(ctrl *gomock.Controller) *MockOpentsdbProvider {
	mock := &MockOpentsdbProvider{ctrl: ctrl}
	mock.recorder = &MockOpentsdbProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpentsdbProvider) EXPECT() *MockOpentsdbProviderMockRecorder {
	return m.recorder
}

// Aggregators mocks base method.
func (m *MockOpentsdbProvider) Aggregators() (*AggregatorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregators")
	ret0, _ := ret[0].(*AggregatorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregators indicates an expected call of Aggregators.
func (mr *MockOpentsdbProviderMockRecorder) Aggregators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregators", reflect.TypeOf((*MockOpentsdbProvider)(nil).Aggregators))
}

// AssignUID mocks base method.
func (m *MockOpentsdbProvider) AssignUID(assignParam *UIDAssignParam) (*UIDAssignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUID", assignParam)
	ret0, _ := ret[0].(*UIDAssignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUID indicates an expected call of AssignUID.
func (mr *MockOpentsdbProviderMockRecorder) AssignUID(assignParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUID", reflect.TypeOf((*MockOpentsdbProvider)(nil).AssignUID), assignParam)
}

// BulkDeleteAnnotations mocks base method.
func (m *MockOpentsdbProvider) BulkDeleteAnnotations(bulkDelParam *BulkAnnoDeleteInfo) (*BulkAnnotatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteAnnotations", bulkDelParam)
	ret0, _ := ret[0].(*BulkAnnotatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDeleteAnnotations indicates an expected call of BulkDeleteAnnotations.
func (mr *MockOpentsdbProviderMockRecorder) BulkDeleteAnnotations(bulkDelParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteAnnotations", reflect.TypeOf((*MockOpentsdbProvider)(nil).BulkDeleteAnnotations), bulkDelParam)
}

// BulkUpdateAnnotations mocks base method.
func (m *MockOpentsdbProvider) BulkUpdateAnnotations(annotations []Annotation) (*BulkAnnotatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateAnnotations", annotations)
	ret0, _ := ret[0].(*BulkAnnotatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpdateAnnotations indicates an expected call of BulkUpdateAnnotations.
func (mr *MockOpentsdbProviderMockRecorder) BulkUpdateAnnotations(annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateAnnotations", reflect.TypeOf((*MockOpentsdbProvider)(nil).BulkUpdateAnnotations), annotations)
}

// Connect mocks base method.
func (m *MockOpentsdbProvider) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockOpentsdbProviderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockOpentsdbProvider)(nil).Connect))
}

// DeleteAnnotation mocks base method.
func (m *MockOpentsdbProvider) DeleteAnnotation(annotation *Annotation) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotation", annotation)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnnotation indicates an expected call of DeleteAnnotation.
func (mr *MockOpentsdbProviderMockRecorder) DeleteAnnotation(annotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotation", reflect.TypeOf((*MockOpentsdbProvider)(nil).DeleteAnnotation), annotation)
}

// DeleteTSMetaData mocks base method.
func (m *MockOpentsdbProvider) DeleteTSMetaData(tsMetaData *TSMetaData) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTSMetaData", tsMetaData)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTSMetaData indicates an expected call of DeleteTSMetaData.
func (mr *MockOpentsdbProviderMockRecorder) DeleteTSMetaData(tsMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTSMetaData", reflect.TypeOf((*MockOpentsdbProvider)(nil).DeleteTSMetaData), tsMetaData)
}

// DeleteUIDMetaData mocks base method.
func (m *MockOpentsdbProvider) DeleteUIDMetaData(uidMetaData *UIDMetaData) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUIDMetaData", uidMetaData)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUIDMetaData indicates an expected call of DeleteUIDMetaData.
func (mr *MockOpentsdbProviderMockRecorder) DeleteUIDMetaData(uidMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUIDMetaData", reflect.TypeOf((*MockOpentsdbProvider)(nil).DeleteUIDMetaData), uidMetaData)
}

// Dropcaches mocks base method.
func (m *MockOpentsdbProvider) Dropcaches() (*DropcachesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dropcaches")
	ret0, _ := ret[0].(*DropcachesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dropcaches indicates an expected call of Dropcaches.
func (mr *MockOpentsdbProviderMockRecorder) Dropcaches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dropcaches", reflect.TypeOf((*MockOpentsdbProvider)(nil).Dropcaches))
}

// GetContext mocks base method.
func (m *MockOpentsdbProvider) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockOpentsdbProviderMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockOpentsdbProvider)(nil).GetContext))
}

// HealthCheck mocks base method.
func (m *MockOpentsdbProvider) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockOpentsdbProviderMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockOpentsdbProvider)(nil).HealthCheck))
}

// Put mocks base method.
func (m *MockOpentsdbProvider) Put(data []DataPoint, queryParam string) (*PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", data, queryParam)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockOpentsdbProviderMockRecorder) Put(data, queryParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockOpentsdbProvider)(nil).Put), data, queryParam)
}

// Query mocks base method.
func (m *MockOpentsdbProvider) Query(param *QueryParam) (*QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", param)
	ret0, _ := ret[0].(*QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockOpentsdbProviderMockRecorder) Query(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOpentsdbProvider)(nil).Query), param)
}

// QueryAnnotation mocks base method.
func (m *MockOpentsdbProvider) QueryAnnotation(queryAnnoParam map[string]any) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnnotation", queryAnnoParam)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnnotation indicates an expected call of QueryAnnotation.
func (mr *MockOpentsdbProviderMockRecorder) QueryAnnotation(queryAnnoParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnnotation", reflect.TypeOf((*MockOpentsdbProvider)(nil).QueryAnnotation), queryAnnoParam)
}

// QueryLast mocks base method.
func (m *MockOpentsdbProvider) QueryLast(param *QueryLastParam) (*QueryLastResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLast", param)
	ret0, _ := ret[0].(*QueryLastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLast indicates an expected call of QueryLast.
func (mr *MockOpentsdbProviderMockRecorder) QueryLast(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLast", reflect.TypeOf((*MockOpentsdbProvider)(nil).QueryLast), param)
}

// QueryTSMetaData mocks base method.
func (m *MockOpentsdbProvider) QueryTSMetaData(tsuid string) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTSMetaData", tsuid)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTSMetaData indicates an expected call of QueryTSMetaData.
func (mr *MockOpentsdbProviderMockRecorder) QueryTSMetaData(tsuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTSMetaData", reflect.TypeOf((*MockOpentsdbProvider)(nil).QueryTSMetaData), tsuid)
}

// QueryUIDMetaData mocks base method.
func (m *MockOpentsdbProvider) QueryUIDMetaData(metaQueryParam map[string]string) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUIDMetaData", metaQueryParam)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUIDMetaData indicates an expected call of QueryUIDMetaData.
func (mr *MockOpentsdbProviderMockRecorder) QueryUIDMetaData(metaQueryParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUIDMetaData", reflect.TypeOf((*MockOpentsdbProvider)(nil).QueryUIDMetaData), metaQueryParam)
}

// Suggest mocks base method.
func (m *MockOpentsdbProvider) Suggest(sugParm *SuggestParam) (*SuggestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", sugParm)
	ret0, _ := ret[0].(*SuggestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest.
func (mr *MockOpentsdbProviderMockRecorder) Suggest(sugParm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockOpentsdbProvider)(nil).Suggest), sugParm)
}

// UpdateAnnotation mocks base method.
func (m *MockOpentsdbProvider) UpdateAnnotation(annotation *Annotation) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotation", annotation)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotation indicates an expected call of UpdateAnnotation.
func (mr *MockOpentsdbProviderMockRecorder) UpdateAnnotation(annotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotation", reflect.TypeOf((*MockOpentsdbProvider)(nil).UpdateAnnotation), annotation)
}

// UpdateTSMetaData mocks base method.
func (m *MockOpentsdbProvider) UpdateTSMetaData(tsMetaData *TSMetaData) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTSMetaData", tsMetaData)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTSMetaData indicates an expected call of UpdateTSMetaData.
func (mr *MockOpentsdbProviderMockRecorder) UpdateTSMetaData(tsMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTSMetaData", reflect.TypeOf((*MockOpentsdbProvider)(nil).UpdateTSMetaData), tsMetaData)
}

// UpdateUIDMetaData mocks base method.
func (m *MockOpentsdbProvider) UpdateUIDMetaData(uidMetaData *UIDMetaData) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUIDMetaData", uidMetaData)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUIDMetaData indicates an expected call of UpdateUIDMetaData.
func (mr *MockOpentsdbProviderMockRecorder) UpdateUIDMetaData(uidMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUIDMetaData", reflect.TypeOf((*MockOpentsdbProvider)(nil).UpdateUIDMetaData), uidMetaData)
}

// UseLogger mocks base method.
func (m *MockOpentsdbProvider) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockOpentsdbProviderMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockOpentsdbProvider)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockOpentsdbProvider) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockOpentsdbProviderMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockOpentsdbProvider)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockOpentsdbProvider) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockOpentsdbProviderMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockOpentsdbProvider)(nil).UseTracer), tracer)
}

// Version mocks base method.
func (m *MockOpentsdbProvider) Version() (*VersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockOpentsdbProviderMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockOpentsdbProvider)(nil).Version))
}

// MockOpentsdbProviderWithContext is a mock of OpentsdbProviderWithContext interface.
type MockOpentsdbProviderWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockOpentsdbProviderWithContextMockRecorder
}

// MockOpentsdbProviderWithContextMockRecorder is the mock recorder for MockOpentsdbProviderWithContext.
type MockOpentsdbProviderWithContextMockRecorder struct {
	mock *MockOpentsdbProviderWithContext
}

// NewMockOpentsdbProviderWithContext creates a new mock instance.
func NewMockOpentsdbProviderWithContext(ctrl *gomock.Controller) *MockOpentsdbProviderWithContext {
	mock := &MockOpentsdbProviderWithContext{ctrl: ctrl}
	mock.recorder = &MockOpentsdbProviderWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpentsdbProviderWithContext) EXPECT() *MockOpentsdbProviderWithContextMockRecorder {
	return m.recorder
}

// Aggregators mocks base method.
func (m *MockOpentsdbProviderWithContext) Aggregators() (*AggregatorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregators")
	ret0, _ := ret[0].(*AggregatorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregators indicates an expected call of Aggregators.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Aggregators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregators", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Aggregators))
}

// AssignUID mocks base method.
func (m *MockOpentsdbProviderWithContext) AssignUID(assignParam *UIDAssignParam) (*UIDAssignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUID", assignParam)
	ret0, _ := ret[0].(*UIDAssignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUID indicates an expected call of AssignUID.
func (mr *MockOpentsdbProviderWithContextMockRecorder) AssignUID(assignParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUID", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).AssignUID), assignParam)
}

// BulkDeleteAnnotations mocks base method.
func (m *MockOpentsdbProviderWithContext) BulkDeleteAnnotations(bulkDelParam *BulkAnnoDeleteInfo) (*BulkAnnotatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteAnnotations", bulkDelParam)
	ret0, _ := ret[0].(*BulkAnnotatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDeleteAnnotations indicates an expected call of BulkDeleteAnnotations.
func (mr *MockOpentsdbProviderWithContextMockRecorder) BulkDeleteAnnotations(bulkDelParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteAnnotations", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).BulkDeleteAnnotations), bulkDelParam)
}

// BulkUpdateAnnotations mocks base method.
func (m *MockOpentsdbProviderWithContext) BulkUpdateAnnotations(annotations []Annotation) (*BulkAnnotatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateAnnotations", annotations)
	ret0, _ := ret[0].(*BulkAnnotatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpdateAnnotations indicates an expected call of BulkUpdateAnnotations.
func (mr *MockOpentsdbProviderWithContextMockRecorder) BulkUpdateAnnotations(annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateAnnotations", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).BulkUpdateAnnotations), annotations)
}

// Connect mocks base method.
func (m *MockOpentsdbProviderWithContext) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Connect))
}

// DeleteAnnotation mocks base method.
func (m *MockOpentsdbProviderWithContext) DeleteAnnotation(annotation *Annotation) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotation", annotation)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnnotation indicates an expected call of DeleteAnnotation.
func (mr *MockOpentsdbProviderWithContextMockRecorder) DeleteAnnotation(annotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotation", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).DeleteAnnotation), annotation)
}

// DeleteTSMetaData mocks base method.
func (m *MockOpentsdbProviderWithContext) DeleteTSMetaData(tsMetaData *TSMetaData) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTSMetaData", tsMetaData)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTSMetaData indicates an expected call of DeleteTSMetaData.
func (mr *MockOpentsdbProviderWithContextMockRecorder) DeleteTSMetaData(tsMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTSMetaData", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).DeleteTSMetaData), tsMetaData)
}

// DeleteUIDMetaData mocks base method.
func (m *MockOpentsdbProviderWithContext) DeleteUIDMetaData(uidMetaData *UIDMetaData) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUIDMetaData", uidMetaData)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUIDMetaData indicates an expected call of DeleteUIDMetaData.
func (mr *MockOpentsdbProviderWithContextMockRecorder) DeleteUIDMetaData(uidMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUIDMetaData", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).DeleteUIDMetaData), uidMetaData)
}

// Dropcaches mocks base method.
func (m *MockOpentsdbProviderWithContext) Dropcaches() (*DropcachesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dropcaches")
	ret0, _ := ret[0].(*DropcachesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dropcaches indicates an expected call of Dropcaches.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Dropcaches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dropcaches", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Dropcaches))
}

// GetContext mocks base method.
func (m *MockOpentsdbProviderWithContext) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockOpentsdbProviderWithContextMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).GetContext))
}

// HealthCheck mocks base method.
func (m *MockOpentsdbProviderWithContext) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockOpentsdbProviderWithContextMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).HealthCheck))
}

// Put mocks base method.
func (m *MockOpentsdbProviderWithContext) Put(data []DataPoint, queryParam string) (*PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", data, queryParam)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Put(data, queryParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Put), data, queryParam)
}

// Query mocks base method.
func (m *MockOpentsdbProviderWithContext) Query(param *QueryParam) (*QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", param)
	ret0, _ := ret[0].(*QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Query(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Query), param)
}

// QueryAnnotation mocks base method.
func (m *MockOpentsdbProviderWithContext) QueryAnnotation(queryAnnoParam map[string]any) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnnotation", queryAnnoParam)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnnotation indicates an expected call of QueryAnnotation.
func (mr *MockOpentsdbProviderWithContextMockRecorder) QueryAnnotation(queryAnnoParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnnotation", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).QueryAnnotation), queryAnnoParam)
}

// QueryLast mocks base method.
func (m *MockOpentsdbProviderWithContext) QueryLast(param *QueryLastParam) (*QueryLastResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLast", param)
	ret0, _ := ret[0].(*QueryLastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLast indicates an expected call of QueryLast.
func (mr *MockOpentsdbProviderWithContextMockRecorder) QueryLast(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLast", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).QueryLast), param)
}

// QueryTSMetaData mocks base method.
func (m *MockOpentsdbProviderWithContext) QueryTSMetaData(tsuid string) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTSMetaData", tsuid)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTSMetaData indicates an expected call of QueryTSMetaData.
func (mr *MockOpentsdbProviderWithContextMockRecorder) QueryTSMetaData(tsuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTSMetaData", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).QueryTSMetaData), tsuid)
}

// QueryUIDMetaData mocks base method.
func (m *MockOpentsdbProviderWithContext) QueryUIDMetaData(metaQueryParam map[string]string) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUIDMetaData", metaQueryParam)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUIDMetaData indicates an expected call of QueryUIDMetaData.
func (mr *MockOpentsdbProviderWithContextMockRecorder) QueryUIDMetaData(metaQueryParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUIDMetaData", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).QueryUIDMetaData), metaQueryParam)
}

// Suggest mocks base method.
func (m *MockOpentsdbProviderWithContext) Suggest(sugParm *SuggestParam) (*SuggestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", sugParm)
	ret0, _ := ret[0].(*SuggestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Suggest(sugParm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Suggest), sugParm)
}

// UpdateAnnotation mocks base method.
func (m *MockOpentsdbProviderWithContext) UpdateAnnotation(annotation *Annotation) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotation", annotation)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotation indicates an expected call of UpdateAnnotation.
func (mr *MockOpentsdbProviderWithContextMockRecorder) UpdateAnnotation(annotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotation", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).UpdateAnnotation), annotation)
}

// UpdateTSMetaData mocks base method.
func (m *MockOpentsdbProviderWithContext) UpdateTSMetaData(tsMetaData *TSMetaData) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTSMetaData", tsMetaData)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTSMetaData indicates an expected call of UpdateTSMetaData.
func (mr *MockOpentsdbProviderWithContextMockRecorder) UpdateTSMetaData(tsMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTSMetaData", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).UpdateTSMetaData), tsMetaData)
}

// UpdateUIDMetaData mocks base method.
func (m *MockOpentsdbProviderWithContext) UpdateUIDMetaData(uidMetaData *UIDMetaData) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUIDMetaData", uidMetaData)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUIDMetaData indicates an expected call of UpdateUIDMetaData.
func (mr *MockOpentsdbProviderWithContextMockRecorder) UpdateUIDMetaData(uidMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUIDMetaData", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).UpdateUIDMetaData), uidMetaData)
}

// UseLogger mocks base method.
func (m *MockOpentsdbProviderWithContext) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockOpentsdbProviderWithContextMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockOpentsdbProviderWithContext) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockOpentsdbProviderWithContextMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockOpentsdbProviderWithContext) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockOpentsdbProviderWithContextMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).UseTracer), tracer)
}

// Version mocks base method.
func (m *MockOpentsdbProviderWithContext) Version() (*VersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockOpentsdbProviderWithContextMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).Version))
}

// WithContext mocks base method.
func (m *MockOpentsdbProviderWithContext) WithContext(ctx context.Context) OpentsDBClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(OpentsDBClient)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockOpentsdbProviderWithContextMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockOpentsdbProviderWithContext)(nil).WithContext), ctx)
}

// MockOpentsDBClient is a mock of OpentsDBClient interface.
type MockOpentsDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpentsDBClientMockRecorder
}

// MockOpentsDBClientMockRecorder is the mock recorder for MockOpentsDBClient.
type MockOpentsDBClientMockRecorder struct {
	mock *MockOpentsDBClient
}

// NewMockOpentsDBClient creates a new mock instance.
func NewMockOpentsDBClient(ctrl *gomock.Controller) *MockOpentsDBClient {
	mock := &MockOpentsDBClient{ctrl: ctrl}
	mock.recorder = &MockOpentsDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpentsDBClient) EXPECT() *MockOpentsDBClientMockRecorder {
	return m.recorder
}

// Aggregators mocks base method.
func (m *MockOpentsDBClient) Aggregators() (*AggregatorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregators")
	ret0, _ := ret[0].(*AggregatorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregators indicates an expected call of Aggregators.
func (mr *MockOpentsDBClientMockRecorder) Aggregators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregators", reflect.TypeOf((*MockOpentsDBClient)(nil).Aggregators))
}

// AssignUID mocks base method.
func (m *MockOpentsDBClient) AssignUID(assignParam *UIDAssignParam) (*UIDAssignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUID", assignParam)
	ret0, _ := ret[0].(*UIDAssignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUID indicates an expected call of AssignUID.
func (mr *MockOpentsDBClientMockRecorder) AssignUID(assignParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUID", reflect.TypeOf((*MockOpentsDBClient)(nil).AssignUID), assignParam)
}

// BulkDeleteAnnotations mocks base method.
func (m *MockOpentsDBClient) BulkDeleteAnnotations(bulkDelParam *BulkAnnoDeleteInfo) (*BulkAnnotatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteAnnotations", bulkDelParam)
	ret0, _ := ret[0].(*BulkAnnotatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDeleteAnnotations indicates an expected call of BulkDeleteAnnotations.
func (mr *MockOpentsDBClientMockRecorder) BulkDeleteAnnotations(bulkDelParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteAnnotations", reflect.TypeOf((*MockOpentsDBClient)(nil).BulkDeleteAnnotations), bulkDelParam)
}

// BulkUpdateAnnotations mocks base method.
func (m *MockOpentsDBClient) BulkUpdateAnnotations(annotations []Annotation) (*BulkAnnotatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateAnnotations", annotations)
	ret0, _ := ret[0].(*BulkAnnotatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpdateAnnotations indicates an expected call of BulkUpdateAnnotations.
func (mr *MockOpentsDBClientMockRecorder) BulkUpdateAnnotations(annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateAnnotations", reflect.TypeOf((*MockOpentsDBClient)(nil).BulkUpdateAnnotations), annotations)
}

// DeleteAnnotation mocks base method.
func (m *MockOpentsDBClient) DeleteAnnotation(annotation *Annotation) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotation", annotation)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnnotation indicates an expected call of DeleteAnnotation.
func (mr *MockOpentsDBClientMockRecorder) DeleteAnnotation(annotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotation", reflect.TypeOf((*MockOpentsDBClient)(nil).DeleteAnnotation), annotation)
}

// DeleteTSMetaData mocks base method.
func (m *MockOpentsDBClient) DeleteTSMetaData(tsMetaData *TSMetaData) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTSMetaData", tsMetaData)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTSMetaData indicates an expected call of DeleteTSMetaData.
func (mr *MockOpentsDBClientMockRecorder) DeleteTSMetaData(tsMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTSMetaData", reflect.TypeOf((*MockOpentsDBClient)(nil).DeleteTSMetaData), tsMetaData)
}

// DeleteUIDMetaData mocks base method.
func (m *MockOpentsDBClient) DeleteUIDMetaData(uidMetaData *UIDMetaData) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUIDMetaData", uidMetaData)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUIDMetaData indicates an expected call of DeleteUIDMetaData.
func (mr *MockOpentsDBClientMockRecorder) DeleteUIDMetaData(uidMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUIDMetaData", reflect.TypeOf((*MockOpentsDBClient)(nil).DeleteUIDMetaData), uidMetaData)
}

// Dropcaches mocks base method.
func (m *MockOpentsDBClient) Dropcaches() (*DropcachesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dropcaches")
	ret0, _ := ret[0].(*DropcachesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dropcaches indicates an expected call of Dropcaches.
func (mr *MockOpentsDBClientMockRecorder) Dropcaches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dropcaches", reflect.TypeOf((*MockOpentsDBClient)(nil).Dropcaches))
}

// GetContext mocks base method.
func (m *MockOpentsDBClient) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockOpentsDBClientMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockOpentsDBClient)(nil).GetContext))
}

// HealthCheck mocks base method.
func (m *MockOpentsDBClient) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockOpentsDBClientMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockOpentsDBClient)(nil).HealthCheck))
}

// Put mocks base method.
func (m *MockOpentsDBClient) Put(data []DataPoint, queryParam string) (*PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", data, queryParam)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockOpentsDBClientMockRecorder) Put(data, queryParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockOpentsDBClient)(nil).Put), data, queryParam)
}

// Query mocks base method.
func (m *MockOpentsDBClient) Query(param *QueryParam) (*QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", param)
	ret0, _ := ret[0].(*QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockOpentsDBClientMockRecorder) Query(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOpentsDBClient)(nil).Query), param)
}

// QueryAnnotation mocks base method.
func (m *MockOpentsDBClient) QueryAnnotation(queryAnnoParam map[string]any) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnnotation", queryAnnoParam)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnnotation indicates an expected call of QueryAnnotation.
func (mr *MockOpentsDBClientMockRecorder) QueryAnnotation(queryAnnoParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnnotation", reflect.TypeOf((*MockOpentsDBClient)(nil).QueryAnnotation), queryAnnoParam)
}

// QueryLast mocks base method.
func (m *MockOpentsDBClient) QueryLast(param *QueryLastParam) (*QueryLastResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLast", param)
	ret0, _ := ret[0].(*QueryLastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLast indicates an expected call of QueryLast.
func (mr *MockOpentsDBClientMockRecorder) QueryLast(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLast", reflect.TypeOf((*MockOpentsDBClient)(nil).QueryLast), param)
}

// QueryTSMetaData mocks base method.
func (m *MockOpentsDBClient) QueryTSMetaData(tsuid string) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTSMetaData", tsuid)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTSMetaData indicates an expected call of QueryTSMetaData.
func (mr *MockOpentsDBClientMockRecorder) QueryTSMetaData(tsuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTSMetaData", reflect.TypeOf((*MockOpentsDBClient)(nil).QueryTSMetaData), tsuid)
}

// QueryUIDMetaData mocks base method.
func (m *MockOpentsDBClient) QueryUIDMetaData(metaQueryParam map[string]string) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUIDMetaData", metaQueryParam)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUIDMetaData indicates an expected call of QueryUIDMetaData.
func (mr *MockOpentsDBClientMockRecorder) QueryUIDMetaData(metaQueryParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUIDMetaData", reflect.TypeOf((*MockOpentsDBClient)(nil).QueryUIDMetaData), metaQueryParam)
}

// Suggest mocks base method.
func (m *MockOpentsDBClient) Suggest(sugParm *SuggestParam) (*SuggestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", sugParm)
	ret0, _ := ret[0].(*SuggestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest.
func (mr *MockOpentsDBClientMockRecorder) Suggest(sugParm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockOpentsDBClient)(nil).Suggest), sugParm)
}

// UpdateAnnotation mocks base method.
func (m *MockOpentsDBClient) UpdateAnnotation(annotation *Annotation) (*AnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotation", annotation)
	ret0, _ := ret[0].(*AnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotation indicates an expected call of UpdateAnnotation.
func (mr *MockOpentsDBClientMockRecorder) UpdateAnnotation(annotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotation", reflect.TypeOf((*MockOpentsDBClient)(nil).UpdateAnnotation), annotation)
}

// UpdateTSMetaData mocks base method.
func (m *MockOpentsDBClient) UpdateTSMetaData(tsMetaData *TSMetaData) (*TSMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTSMetaData", tsMetaData)
	ret0, _ := ret[0].(*TSMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTSMetaData indicates an expected call of UpdateTSMetaData.
func (mr *MockOpentsDBClientMockRecorder) UpdateTSMetaData(tsMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTSMetaData", reflect.TypeOf((*MockOpentsDBClient)(nil).UpdateTSMetaData), tsMetaData)
}

// UpdateUIDMetaData mocks base method.
func (m *MockOpentsDBClient) UpdateUIDMetaData(uidMetaData *UIDMetaData) (*UIDMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUIDMetaData", uidMetaData)
	ret0, _ := ret[0].(*UIDMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUIDMetaData indicates an expected call of UpdateUIDMetaData.
func (mr *MockOpentsDBClientMockRecorder) UpdateUIDMetaData(uidMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUIDMetaData", reflect.TypeOf((*MockOpentsDBClient)(nil).UpdateUIDMetaData), uidMetaData)
}

// Version mocks base method.
func (m *MockOpentsDBClient) Version() (*VersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockOpentsDBClientMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockOpentsDBClient)(nil).Version))
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// GetCustomParser mocks base method.
func (m *MockResponse) GetCustomParser(ctx context.Context) func([]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomParser", ctx)
	ret0, _ := ret[0].(func([]byte) error)
	return ret0
}

// GetCustomParser indicates an expected call of GetCustomParser.
func (mr *MockResponseMockRecorder) GetCustomParser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomParser", reflect.TypeOf((*MockResponse)(nil).GetCustomParser), ctx)
}

// SetStatus mocks base method.
func (m *MockResponse) SetStatus(ctx context.Context, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", ctx, code)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockResponseMockRecorder) SetStatus(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockResponse)(nil).SetStatus), ctx, code)
}

// String mocks base method.
func (m *MockResponse) String(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockResponseMockRecorder) String(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockResponse)(nil).String), ctx)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockProvider) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockProviderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockProvider)(nil).Connect))
}

// UseLogger mocks base method.
func (m *MockProvider) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockProviderMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockProvider)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockProvider) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockProviderMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockProvider)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockProvider) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockProviderMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockProvider)(nil).UseTracer), tracer)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(pattern string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(pattern any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Logf mocks base method.
func (m *MockLogger) Logf(pattern string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockLoggerMockRecorder) Logf(pattern any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockLogger)(nil).Logf), varargs...)
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// NewHistogram mocks base method.
func (m *MockMetrics) NewHistogram(name, desc string, buckets ...float64) {
	m.ctrl.T.Helper()
	varargs := []any{name, desc}
	for _, a := range buckets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NewHistogram", varargs...)
}

// NewHistogram indicates an expected call of NewHistogram.
func (mr *MockMetricsMockRecorder) NewHistogram(name, desc any, buckets ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, desc}, buckets...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHistogram", reflect.TypeOf((*MockMetrics)(nil).NewHistogram), varargs...)
}

// RecordHistogram mocks base method.
func (m *MockMetrics) RecordHistogram(ctx context.Context, name string, value float64, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, value}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordHistogram", varargs...)
}

// RecordHistogram indicates an expected call of RecordHistogram.
func (mr *MockMetricsMockRecorder) RecordHistogram(ctx, name, value any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, value}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHistogram", reflect.TypeOf((*MockMetrics)(nil).RecordHistogram), varargs...)
}
